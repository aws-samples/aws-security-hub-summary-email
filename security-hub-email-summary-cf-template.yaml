AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  EmailAddress:
    Description: Email Address for Subscriber to Security Hub summary.
    Type: String
    AllowedPattern: ^[^\s@]+@[^\s@]+\.[^\s@]+$
    ConstraintDescription: Must be a valid Email Address.
  RecurringScheduleCron:
    Description: 'Cron expression for scheduling the Security Hub summary email. Default: Every Monday 8:00 AM GMT. Example: Every Friday 9:00 AM GMT: cron(0 9 ? * 6 *)'
    Default: cron(0 8 ? * 2 *)
    Type: String
  AdditionalEmailFooterText:
    Description: Additional text to append at the end of email message.
    Type: String
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Parameters
        Parameters:
          - EmailAddress
          - RecurringScheduleCron
          - AdditionalEmailFooterText
    ParameterLabels:
      RecurringScheduleCron:
        default: 'CloudWatch Cron Expression:'
      EmailAddress:
        default: 'Email address:'
      AdditionalEmailFooterText:
        default: 'Additional Footer text:'

Resources:

# Create Custom Insights
  Insight01:
    Type: AWS::SecurityHub::Insight
    Properties:
      Name: Summary Email - 01 - AWS Foundational Security Best practices findings by compliance status
      GroupByAttribute: ComplianceStatus
      Filters:
        Type:
          - Value: Software and Configuration Checks/Industry and Regulatory Standards/AWS-Foundational-Security-Best-Practices
            Comparison: EQUALS
        WorkflowStatus:
          - Value: SUPPRESSED
            Comparison: NOT_EQUALS
        RecordState:
          - Value: ACTIVE
            Comparison: EQUALS

  Insight02:
    Type: AWS::SecurityHub::Insight
    Properties:
      Name: Summary Email - 02 - Failed AWS Foundational Security Best practices findings by severity
      GroupByAttribute: SeverityLabel
      Filters:
        Type:
          - Value: Software and Configuration Checks/Industry and Regulatory Standards/AWS-Foundational-Security-Best-Practices
            Comparison: EQUALS
        WorkflowStatus:
          - Value: SUPPRESSED
            Comparison: NOT_EQUALS
        ComplianceStatus:
          - Value: FAILED
            Comparison: EQUALS
        RecordState:
          - Value: ACTIVE
            Comparison: EQUALS

  Insight03:
    Type: AWS::SecurityHub::Insight
    Properties:
      Name: Summary Email - 03 - Count of Amazon GuardDuty findings by severity
      GroupByAttribute: SeverityLabel
      Filters:
        ProductName:
          - Value: GuardDuty
            Comparison: EQUALS
        WorkflowStatus:
          - Value: SUPPRESSED
            Comparison: NOT_EQUALS
        RecordState:
          - Value: ACTIVE
            Comparison: EQUALS

  Insight04:
    Type: AWS::SecurityHub::Insight
    Properties:
      Name: Summary Email - 04 - Count of IAM Access Analyzer findings by severity
      GroupByAttribute: SeverityLabel
      Filters:
        ProductName:
          - Value: IAM Access Analyzer
            Comparison: EQUALS
        WorkflowStatus:
          - Value: SUPPRESSED
            Comparison: NOT_EQUALS
        RecordState:
          - Value: ACTIVE
            Comparison: EQUALS

  Insight05:
    Type: AWS::SecurityHub::Insight
    Properties:
      Name: Summary Email - 05 - Count of all unresolved findings by severity
      GroupByAttribute: SeverityLabel
      Filters:
        WorkflowStatus:
          - Value: RESOLVED
            Comparison: NOT_EQUALS
          - Value: SUPPRESSED
            Comparison: NOT_EQUALS
        RecordState:
          - Value: ACTIVE
            Comparison: EQUALS

  Insight06:
    Type: AWS::SecurityHub::Insight
    Properties:
      Name: Summary Email - 06 - new findings in the last 7 days
      GroupByAttribute: ProductName
      Filters:
        WorkflowStatus:
          - Value: RESOLVED
            Comparison: NOT_EQUALS
          - Value: SUPPRESSED
            Comparison: NOT_EQUALS
        CreatedAt:
          - DateRange:
              Unit: DAYS
              Value: 7
        RecordState:
          - Value: ACTIVE
            Comparison: EQUALS

  Insight07:
    Type: AWS::SecurityHub::Insight
    Properties:
      Name: Summary Email - 07 - Top Resource Types with findings by count
      GroupByAttribute: ResourceType
      Filters:
        WorkflowStatus:
          - Value: SUPPRESSED
            Comparison: NOT_EQUALS
        RecordState:
          - Value: ACTIVE
            Comparison: EQUALS

# SNS Topic to deliver email summary
  SecurityHubRecurringSummarySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: SecurityHubRecurringSummary
      DisplayName: Security Hub Summary Report
      KmsMasterKeyId: alias/aws/sns
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email

# Schedule to send the email on a recurring basis
  SecurityHubSummaryEmailSchedule:
    Properties:
      Name: SecurityHubSummaryEmailSchedule
      Description: Triggers the Recurring Security Hub summary email
      ScheduleExpression: !Ref RecurringScheduleCron
      Targets:
        - Arn: !GetAtt SendSecurityHubSummaryEmailLambda.Arn
          Id: '1'
    Type: AWS::Events::Rule
  CloudWatchSchedulePermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SendSecurityHubSummaryEmailLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SecurityHubSummaryEmailSchedule.Arn
    Type: AWS::Lambda::Permission
  
# Execution role for Lambda function to send summary email
  SendEmailLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSSecurityHubReadOnlyAccess
      Policies:
        - PolicyName: SecurityHubSendEmailToSNS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref SecurityHubRecurringSummarySNSTopic
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:TagResource
                Resource:
                  - arn:aws:logs:*:*:*
                  - arn:aws:logs:*:*:*/*

# Lambda function to send summary email
  SendSecurityHubSummaryEmailLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SendSecurityHubSummaryEmail
      Code:
        ZipFile: |
          import boto3
          import os
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          SINGLE_LINE_LENGTH = 80
          DOUBLE_LINE_LENGTH = 47
          FOOTER_TEXT = os.environ['AdditionalEmailFooterText']
          HEADER_TEXT = 'Weekly Security Hub Report \n'
          FOOTER_URL = 'https://console.aws.amazon.com/securityhub/home/standards#/standards'

          # this function will add a horizontal line to the email
          def add_horizontal_line(text_body, line_char, line_length):
              y = 0
              while y <= line_length:
                  text_body += line_char
                  y += 1
              text_body += '\n'
              
              return text_body

          def lambda_handler(event, context):
              
              insightArns = []
              insightLabels = []
              #this is the placement number of insights that are grouped by severity, this is used for reversing the sort
              severityTypeInsights = [1,2,3,4] 
              
              #fetch arns for custom insights from lambda environment variables 
              insightArns.append(os.environ['ARNInsight01'])
              insightArns.append(os.environ['ARNInsight02'])
              insightArns.append(os.environ['ARNInsight03'])
              insightArns.append(os.environ['ARNInsight04'])
              insightArns.append(os.environ['ARNInsight05'])
              insightArns.append(os.environ['ARNInsight06'])
              insightArns.append(os.environ['ARNInsight07'])
              
              #fetch the SNS arn to send the email body to, from lambda environment variables
              snsTopicArn = os.environ['SNSTopic']

              #determine region from the arns
              arnParsed = insightArns[0].split(':')
              region = arnParsed[3]

              #create list of section labels 
              insightLabels.append('AWS Foundational Security Best Practices security checks:')
              insightLabels.append('AWS Foundational Security Best Practices failed security checks by severity:')
              insightLabels.append('GuardDuty threat detection findings by severity:')
              insightLabels.append('IAM Access Analyzer findings by severity:')
              insightLabels.append('Unresolved findings by severity:')
              insightLabels.append('New findings in the last 7 days:')
              insightLabels.append('Top 10 Resource Types with findings:')
              
              #format Email header
              snsBody = ''
              snsBody = add_horizontal_line(snsBody, '=', DOUBLE_LINE_LENGTH)
              snsBody += HEADER_TEXT
              snsBody = add_horizontal_line(snsBody, '=', DOUBLE_LINE_LENGTH)
              snsBody += '\n\n'
              
              #create boto3 client for Security Hub API calls
              sec_hub_client = boto3.client('securityhub')
              
              #for each custom insight get results and format for email
              i = 0
              while i < len(insightArns):
                  
                  #call security hub api to get results for each custom insight
                  response = sec_hub_client.get_insight_results(
                      InsightArn=insightArns[i]
                  )
                  insightResults = response['InsightResults']['ResultValues']
                  
                  #format into an email - section header
                  snsBody += str(insightLabels[i]) + '\n'
                  snsBody = add_horizontal_line(snsBody,'-', SINGLE_LINE_LENGTH)

                  #check for blank custom insights
                  if len(insightResults) == 0:
                      snsBody += 'NO RESULTS \n'
                  
                  #determine how many rows are in this section, cap at 10
                  totalRows = len(insightResults)
                  if totalRows > 10:
                      totalRows = 10
                  
                  #determine if this is the first section to customize the label
                  if i == 0:
                      firstSection = True
                  else:
                      firstSection = False
                  
                  #determine if this is an insight that needs an updated sort
                  if (i in severityTypeInsights): 
                      #reverse the sort
                      insightResults.reverse()

                  #convert the API results into rows for email formatting    
                  x = 0   
                  while x < totalRows:
                      
                      snsBody  +=  str(insightResults[x]['Count']) #add the value
                      snsBody += '\t - \t'    #add a divider
                      if firstSection: #add two extra labels (TOTAL and CHECKS) to the values for the foundational summary 
                          snsBody += 'TOTAL '
                          snsBody += str(insightResults[x]['GroupByAttributeValue']) #add the label
                          snsBody += ' CHECKS'
                      else:
                          snsBody += str(insightResults[x]['GroupByAttributeValue']) #add the label
                          
                      snsBody += '\n' #next line
                      x += 1
                  
                  #add table footer
                  snsBody = add_horizontal_line(snsBody,'-', SINGLE_LINE_LENGTH)
                  snsBody +=' \n'

                  #create and add deep link for this section
                  insightLink = 'https://' + region + '.console.aws.amazon.com/securityhub/home?region='
                  insightLink += region + '#/insights/' + insightArns[i]
                  snsBody += insightLink

                  snsBody += ' \n\n'
                  i += 1
              
              #add footer text  
              snsBody += FOOTER_TEXT
              snsBody += '\n'
              snsBody = add_horizontal_line(snsBody,'-', SINGLE_LINE_LENGTH)
              snsBody += FOOTER_URL

              #send to SNS
              sns_client = boto3.client('sns')

              response = sns_client.publish(
                  TopicArn=snsTopicArn,
                  Message=snsBody
              )

              return {
                  'statusCode': 200,
              }
      Runtime: python3.12
      Handler: index.lambda_handler
      Timeout: '30'
      Environment:
        Variables:
          ARNInsight01: !Ref Insight01
          ARNInsight02: !Ref Insight02
          ARNInsight03: !Ref Insight03
          ARNInsight04: !Ref Insight04
          ARNInsight05: !Ref Insight05
          ARNInsight06: !Ref Insight06
          ARNInsight07: !Ref Insight07
          SNSTopic: !Ref SecurityHubRecurringSummarySNSTopic
          AdditionalEmailFooterText: !Ref AdditionalEmailFooterText
      Role: !GetAtt SendEmailLambdaExecutionRole.Arn